//mympi

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	MPI_Init(&argc, &argv);
	printf("\n Hello World");
	MPI_Finalize();
	return 0;
}

//q2

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	printf("Hello world from rank %d", rank);
	MPI_Finalize();
	return 0;
}

//q3

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
		MPI_Comm_size(MPI_COMM_WORLD, &size);
	int a=8, b=4;
	if(rank==0)
	{
		printf("\n Rank %d Addition %d + %d = %d",rank,a,b,a+b);
	}
	else if(rank==1)
	{
		printf("\n Rank %d Subtraction %d - %d = %d",rank,a,b,a-b);
	}
	else if(rank==2)
	{
		printf("\n Rank %d Multiplication %d * %d = %d",rank,a,b,a*b);
	}
	else
		printf("\n Rank %d Division %d / %d = %d",rank,a,b,a/b);

	MPI_Finalize();
	return 0;
}

//q4

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if(rank%2==0)
		printf("\n Rank %d Hello",rank);
	else
		printf("\n Rank %d World",rank);
	MPI_Finalize();
	return 0;
}


//Q5

 #include <mpi.h>
#include <stdio.h>

void createPrime(int low, int high)
{
	int i, j, flag=0;
	for(i=low; i<=high; i++)
	{
		for(j=i-1; j>=2; j--)
			if(i%j==0)
			{
				flag=1;
				break;
			}
		if(flag==0)
			printf("\n%d",i);
		flag=0;
	}
}

int main(int argc, char *argv[])
{
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if(rank==0)
		createPrime(2,49);
	else
		createPrime(50,100);
	MPI_Finalize();
	return 0;
}


//Q6

 #include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	int i=0;
	int a[]={1,2,3,4,5};
	int b[]={6,7,8,9,10};
	int c[5];
	for(i=rank; i<5; i+=size)
	{	c[i]=a[i]+b[i];
		printf("%d\n",c[i]);
	}
	//sleep(5);
		printf("\n");
	return 0;
}
