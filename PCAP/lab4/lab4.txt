// q1
#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	int rank, size, fact=1, factsum, i;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	for(i=1; i<=rank+1; i++)
		fact*=i;
	MPI_Scan(&fact, &factsum, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
	if(rank==size-1)
		printf("\n Sum of all factorial = %d",factsum);
	MPI_Finalize();
	return 0;
}

//q2


#include <stdio.h>
#include <mpi.h>
#include <math.h>

int main(int argc, char *argv[])
{
    int n, done=0;
    double PI25DT = 3.141592653589793238462643;
    double mypi, h, pi, i, sum, x, a;
    int myid, numprocs, resultlen;

    MPI_Init(&argc,&argv);

    MPI_Comm_size(MPI_COMM_WORLD,&numprocs);
    MPI_Comm_rank(MPI_COMM_WORLD,&myid);
    if(myid == 0)
    {
        printf("Enter No Of intervals :");
        scanf("%d",&n);
    }

    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
    if(n!=0)
    {
    sum = 0.0;
    h   = 1.0/n;
    for (i=myid+0.5; i<n; i+=numprocs)
    {
    	x = (1.0 / (1.0 + (i*h)*(i*h)));
        sum += x;
    }

    mypi = 4.0*h*sum;

    MPI_Reduce(&mypi, &pi, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    if (myid == 0)
    {
        printf("pi is approximately %.16f, Error is %.16f\n",
                pi, fabs(pi - PI25DT));
    }
    }
    MPI_Finalize();
    return 0;
}


// q3

#include <stdio.h>
#include <mpi.h>
#include <math.h>

int main(int argc, char *argv[])
{
	int rank, size, find, count=0, ans;
		int arr[50], brr[50];
		int recv[50];
		int n, i;
		MPI_Init(&argc, &argv);
		MPI_Comm_rank(MPI_COMM_WORLD, &rank);
		MPI_Comm_size(MPI_COMM_WORLD, &size);
		if(rank==0)
		{
			n=3;
			printf("\n Enter Value of 3*3 \n");
			for(i=0; i<n*n; i++)
				scanf("%d",&arr[i]);
			printf("\n Enter the value to find : ");
			scanf("%d",&find);
		}
		MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);
		MPI_Bcast(&find,1,MPI_INT,0,MPI_COMM_WORLD);
		MPI_Scatter(arr, n, MPI_INT, &recv, n, MPI_INT, 0, MPI_COMM_WORLD);
		for(i=0; i<n; i++)
			if(recv[i]==find)
			{
				printf("\n %d found at %d position in process %d\n",find,i,rank);
				count++;
			}
	MPI_Reduce(&count, &ans, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	if(rank==0)
		printf("\n No of occurences are : %d",count);
    MPI_Finalize();
    return 0;
}


// q4

#include <stdio.h>
#include <mpi.h>
#include <math.h>

void ErrorHandler(int error_code){
	if(error_code != MPI_SUCCESS){
		char error_string[400];
		int length_of_error_string, error_class;
		MPI_Error_class(error_code, &error_class);
		MPI_Error_string(error_class, error_string, &length_of_error_string);
		fprintf(stderr,"%s %d\n",error_string,length_of_error_string);
		MPI_Error_string(error_code,error_string,&length_of_error_string);
		fprintf(stderr,"Hello_ErrorCode %s\n",error_string);
	}
}

int main(int argc, char *argv[])
{
	int c=3;
	int numtasks, rank, len, error_code;
	error_code = MPI_Init(&argc, &argv);
	MPI_Errhandler_set(MPI_COMM_WORLD,MPI_ERRORS_RETURN);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	error_code = MPI_Comm_size(c,&numtasks);
	ErrorHandler(error_code);
	MPI_Finalize();
	return 0;
}


// q5

#include <mpi.h>
#include <stdio.h>

int main(int argc, char *argv[])
{
	int rank, size, sum=0, n;
	int i,j,a[4][4], b[16], arr[4];

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	/*
	if(rank==0){
		printf("\n Enter 4*4 matrix :\n");
		for(i=0; i<4; i++)
			for(j=0; j<4; j++)
				scanf("%d",&a[i][j]);
	}
	MPI_Scatter(a,4,MPI_INT,b,3,MPI_INT, 0, MPI_COMM_WORLD);
	for(i=0; i<4; i++)
		sum+=b[i];
	MPI_Gather(&sum,1, MPI_INT,&final,1,MPI_INT,0,MPI_COMM_WORLD);
	if(rank==0){
		for(i=0; i<4; i++)
			printf("%d ",final[i]);
	}

	*/
	if(rank==0){
		n=4;
		printf("\n Enter 4*4 matrix :\n");
		for(i=0; i<4; i++)
			for(j=0; j<4; j++)
				scanf("%d",&a[i][j]);
		int k=0;
		for(j=0; j<4; j++)
			for(i=0; i<4; i++)
				{b[k]=a[i][j]; k++;}

	}
	MPI_Bcast(&n,1,MPI_INT,0,MPI_COMM_WORLD);
	MPI_Scatter(&b, n, MPI_INT, &arr, n, MPI_INT, 0, MPI_COMM_WORLD);
	for(i=1; i<4; i++)
		arr[i]+=arr[i-1];
	MPI_Gather(&arr,n,MPI_INT,&b,n,MPI_INT,0,MPI_COMM_WORLD);
	if(rank==0)
	{
		for(i=0; i<16; i++)
		{
			printf("%d ",b[i]);
			if(i%4==0)
				printf("\n");
		}
	}
	MPI_Finalize();
	return 0;
}
