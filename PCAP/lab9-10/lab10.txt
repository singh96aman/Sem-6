
#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

__global__ void substring (char *A, char *B, int sizea, int sizeb) {
	int i, idx = blockIdx.x;
	int flag=1;
	for(i=0; i<sizeb; i++)
		if(B[i]!=A[i+idx])
			{flag=0; break;}
	if(flag==1)
		printf("\n Subtring is found a22t %d",idx);
}

int main345435 () {

	char a[100], b[100];

	printf("\nEnter Main String");
	gets(a);
	printf("\nEnter Substring");
	gets(b);
	cudaEvent_t start, stop;
		float elapsed_time;

		cudaEventCreate(&start);
		cudaEventCreate(&stop);
		cudaEventRecord(start,0);


	a[strlen(a)]='\0';
	b[strlen(b)]='\0';

	char *d_a, *d_b;

    int sizea = sizeof(char) * strlen(a);
    int sizeb = sizeof(char) * strlen(b);

    // Allocate Memories to device copies of the objects
    cudaMalloc((void**)&d_a, sizea);
    cudaMalloc((void**)&d_b, sizeb);

    // Copy inputs to device
    cudaMemcpy(d_a, a, sizea, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, sizeb, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    substring<<<sizea, 1>>>(d_a, d_b,sizea,sizeb);


    cudaEventRecord(stop,0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);

    printf("\n Time to calculate result : %f ms",elapsed_time);


    cudaFree(d_a);
    cudaFree(d_b);

	getchar();

    return 0;
}

//q2


#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

__global__ void rev (char *A,int sizea) {
	int i, idx = blockIdx.x;
	char temp;
	temp = A[idx];
	A[idx] = A[sizea-idx-1];
	A[sizea-idx-1] = temp;
}

int main23423 () {

	char a[100];

	cudaEvent_t start, stop;
	float elapsed_time;

	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	cudaEventRecord(start,0);


	printf("\nEnter Main String");
	gets(a);
	int len = strlen(a);
	a[len]='\0';

	char *d_a, *d_b;

    int sizea = sizeof(char) * len;

    // Allocate Memories to device copies of the objects
    cudaMalloc((void**)&d_a, sizea);

    // Copy inputs to device
    cudaMemcpy(d_a, a, sizea, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    rev<<<sizea/2, 1>>>(d_a,sizea);

    cudaMemcpy(&a, d_a, sizea, cudaMemcpyDeviceToHost);

    cudaEventRecord(stop,0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);

    a[len]='\0';
    printf("\n%s",a);

    printf("\n Time to calculate result : %f ms",elapsed_time);

    cudaFree(d_a);

    getchar();
    return 0;
}

//q3


#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

__global__ void binary(char *A,int sizea, int *c) {
	int i, idx = blockIdx.x;
	int temp = A[idx], temp2=0;
	printf("idx=%d\n",idx);
	while(temp>0){
		temp2=temp2*10+temp%2;
		temp/=2;
	}
	temp=0;
	while(temp2>0){
		temp=temp*10+temp2%10;
		temp2/=10;
	}
	c[idx]=temp;
}

int main234 () {

	char a[100];
	int i;

	cudaEvent_t start, stop;
	float elapsed_time;

	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	cudaEventRecord(start,0);


	printf("\nEnter Main String");
	gets(a);
	int len = strlen(a);
	a[len]='\0';

	int c[len];
	for(i=0; i<len; i++)
		c[i]=1;

	char *d_a;
	int *d_c;

    int sizea = sizeof(char) * len;
    int sizec = sizeof(int) * len;

    // Allocate Memories to device copies of the objects
    cudaMalloc((void**)&d_a, sizea);
    cudaMalloc((void**)&d_c, sizec);

    // Copy inputs to device
    cudaMemcpy(d_a, a, sizea, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, sizec, cudaMemcpyHostToDevice);

    // Launch kernel onto the device
    binary<<<sizea, 1>>>(d_a,sizea,d_c);

    cudaMemcpy(&c, d_c, sizec, cudaMemcpyDeviceToHost);

    cudaEventRecord(stop,0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);

    for(i=0; i<len; i++)
    	printf("\n%c = %d",a[i],c[i]);

    printf("\n Time to calculate result : %f ms",elapsed_time);

    cudaFree(d_a);

    getchar();
    return 0;
}

//q4

#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <string.h>
__global__ void SubstrC(char *str,char *sub,int *count, int *l)
{
	int i, id = blockIdx.x;
	int k=0, sum=0, j=0, len;

	for(j=0; j<id; j++)
		sum+=l[j]+1;
	len = l[j];
	int flag=1;
	for(k=0; k<len; k++)
		if(str[sum+k]!=sub[k])
			{flag=1; break;}

	count[id]=flag;

}

int main()
{
	char a[100], b[100];
	int i;

		printf("\nEnter Main String");
		scanf("%s",a);
		printf("\nEnter Substring");
		scanf("%s",b);
		cudaEvent_t start, stop;
			float elapsed_time;

			cudaEventCreate(&start);
			cudaEventCreate(&stop);
			cudaEventRecord(start,0);


		a[strlen(a)]='\0';
		b[strlen(b)]='\0';

		int noofwords=0;
		    for(i=0; a[i]!='\0'; i++)
		    	if(a[i]==' ')
		    		noofwords++;

		    noofwords++;

		    int l=0, len[noofwords], count[noofwords];
		    while(a[i]!='\0'){
		    	l=0;
		    	i=0;
		    	int j=0;
		    	while(a[i]!=32 && a[i]!='\0'){
		    		l++;
		    		i++;
		    	}
		    	len[j]=l;
		    	j++;
		    	i++;
		    }

		char *d_a, *d_b;
		int *d_c, *d_d;

	    int sizea = sizeof(char) * strlen(a);
	    int sizeb = sizeof(char) * strlen(b);
	    int sizec = sizeof(int) * noofwords;


	    // Allocate Memories to device copies of the objects
	    cudaMalloc((void**)&d_a, sizea);
	    cudaMalloc((void**)&d_b, sizeb);
	    cudaMalloc((void**)&d_c, sizec);
	    cudaMalloc((void**)&d_d, sizec);


	    // Copy inputs to device
	    cudaMemcpy(d_a, a, sizea, cudaMemcpyHostToDevice);
	    cudaMemcpy(d_b, b, sizeb, cudaMemcpyHostToDevice);
	    cudaMemcpy(d_c, count, sizec, cudaMemcpyHostToDevice);
	    cudaMemcpy(d_d, len, sizec, cudaMemcpyHostToDevice);

	    // Launch kernel onto the device
	    SubstrC<<<sizea, 1>>>(d_a, d_b,count,len);

	    cudaMemcpy(&count, d_c, sizec, cudaMemcpyDeviceToHost);


	    cudaEventRecord(stop,0);
	    cudaEventSynchronize(stop);
	    cudaEventElapsedTime(&elapsed_time, start, stop);

	    printf("\n Time to calculate result : %f ms",elapsed_time);

	    for(i=0; i<noofwords; i++)
	    	printf("\n%d",count[i]);


	    cudaFree(d_a);
	    cudaFree(d_b);

		getchar();

	    return 0;
}
